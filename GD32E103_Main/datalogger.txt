// Token

// CvJktXOTu9Qts4CrHON3








const char* rootCACertificate = \
"-----BEGIN CERTIFICATE-----\n"
"MIIDSjCCAjKgAwIBAgIQRK+wgNajJ7qJMDmGLvhAazANBgkqhkiG9w0BAQUFADA/\n" \
"MSQwIgYDVQQKExtEaWdpdGFsIFNpZ25hdHVyZSBUcnVzdCBDby4xFzAVBgNVBAMT\n" \
"DkRTVCBSb290IENBIFgzMB4XDTAwMDkzMDIxMTIxOVoXDTIxMDkzMDE0MDExNVow\n" \
"PzEkMCIGA1UEChMbRGlnaXRhbCBTaWduYXR1cmUgVHJ1c3QgQ28uMRcwFQYDVQQD\n" \
"Ew5EU1QgUm9vdCBDQSBYMzCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEB\n" \
"AN+v6ZdQCINXtMxiZfaQguzH0yxrMMpb7NnDfcdAwRgUi+DoM3ZJKuM/IUmTrE4O\n" \
"rz5Iy2Xu/NMhD2XSKtkyj4zl93ewEnu1lcCJo6m67XMuegwGMoOifooUMM0RoOEq\n" \
"OLl5CjH9UL2AZd+3UWODyOKIYepLYYHsUmu5ouJLGiifSKOeDNoJjj4XLh7dIN9b\n" \
"xiqKqy69cK3FCxolkHRyxXtqqzTWMIn/5WgTe1QLyNau7Fqckh49ZLOMxt+/yUFw\n" \
"7BZy1SbsOFU5Q9D8/RhcQPGX69Wam40dutolucbY38EVAjqr2m7xPi71XAicPNaD\n" \
"aeQQmxkqtilX4+U9m5/wAl0CAwEAAaNCMEAwDwYDVR0TAQH/BAUwAwEB/zAOBgNV\n" \
"HQ8BAf8EBAMCAQYwHQYDVR0OBBYEFMSnsaR7LHH62+FLkHX/xBVghYkQMA0GCSqG\n" \
"SIb3DQEBBQUAA4IBAQCjGiybFwBcqR7uKGY3Or+Dxz9LwwmglSBd49lZRNI+DT69\n" \
"ikugdB/OEIKcdBodfpga3csTS7MgROSR6cz8faXbauX+5v3gTt23ADq1cEmv8uXr\n" \
"AvHRAosZy5Q6XkjEGB5YGV8eAlrwDPGxrancWYaLbumR9YbK+rlmM6pZW87ipxZz\n" \
"R8srzJmwN0jP41ZL9c8PDHIyh8bwRLtTcm1D9SZImlJnt1ir/md2cXjbDaJWFBM5\n" \
"JDGFoqgCWjBH4d1QB7wCCZAA62RjYJsWvIjJEubSfZGL+T0yjWW06XyxV3bqxbYo\n" \
"Ob8VZRzI9neWagqNdwvYkQsEjgfbKbYK7p2CNTUQ\n" \
"-----END CERTIFICATE-----\n";











// Gui tin hieu ve web
void Post()
{
      //std::unique_ptr<BearSSL::WiFiClientSecure>client(new BearSSL::WiFiClientSecure);
   WiFiClientSecure *client = new WiFiClientSecure;
   
  if(client) {
    client -> setCACert(rootCACertificate);
    {
     HTTPClient https;

    Serial.print("[HTTPS] begin...\n");
    
  if (https.begin(*client, "https://iot.wilad.vn/api/v1/CvJktXOTu9Qts4CrHON3/telemetry")) {  // HTTPS

FlowedVolume="";
BatteryLevel=so_pin_;
WarningLevel="0";
MeterIndicator=so_nuoc_;
MeterStatus="1";
SignalStrength=rssi;
SyncStatus="1";
ID=ID_;
Countconnect=dem;

 Serial.print("[HTTP] POST...\n");
 
 // time_= 1564385650000+i; 
 // chuoi du lieu gui di
 // String httpRequestData= "{\"ID\":\"" + String(ID_) + "\",\"so_nuoc\":\"" + String(so_nuoc_) + "\",\"so_lan\":\"" + String(dem) + "\",\"pin\":\"" + String(so_pin_) + "\",\"tin_hieu\":\"" + String(rssi) + "\"}";

  String httpRequestData= "{\"FlowedVolume\":\"" + String(FlowedVolume) + "\",\"BatteryLevel\":\"" + String(BatteryLevel) + "\",\"MeterIndicator\":\"" + String(MeterIndicator) + "\",\"MeterStatus\":\"" + String(MeterStatus) + "\",\"WarningLevel\":\"" + String(WarningLevel) + "\",\"SignalStrength\":\"" + String(rssi) + "\",\"SyncStatus\":\"" + String(SyncStatus) + "\", \"ID\":\"" + String(ID) + "\",\"Countconnect\":\"" + String(Countconnect) + "\"}";


   
   so_nuoc_="";
   so_pin_="";
   ID_="";
   
   int httpCode = https.POST(httpRequestData);
   
   String payload = https.getString(); 
      Serial.print("HTTP Response code: ");
      Serial.println(httpCode);
      Serial.print("HTTP Payload: ");
      Serial.println(payload);    //Print request response payload
       
      if (httpCode > 0) {
        Serial.printf("[HTTP] POST... code: %d\n", httpCode);
        if (httpCode == HTTP_CODE_OK || httpCode == HTTP_CODE_MOVED_PERMANENTLY) {
      //    String payload = https.getString();
      //    Serial.println(payload);
        }

        
      } else {
        Serial.printf("[HTTPS] POST... failed, error: %s\n", https.errorToString(httpCode).c_str());
      }

      https.end();
    }
        else {
        Serial.printf("[HTTPS] Unable to connect\n");
      }
      
  }
  delete client;
  }
  else {
    Serial.println("Unable to create client");
  }
}
///////////////////////////////////////////////////////

//Nhan tin hieu tu web

void Get()
{
///////////////// bo sung chuong trinh GET du lieu ve

    //std::unique_ptr<BearSSL::WiFiClientSecure>client(new BearSSL::WiFiClientSecure);
   WiFiClientSecure *client = new WiFiClientSecure;  
  if(client) {
    client -> setCACert(rootCACertificate);
    {
     HTTPClient https;

    Serial.print("[HTTPS] begin...\n");
    
      if (https.begin(*client, "https://iot.wilad.vn/api/v1/CvJktXOTu9Qts4CrHON3/attributes ")) {  // HTTPS
        Serial.print("[HTTPS] GET...\n");
        // start connection and send HTTP header
        int httpCode = https.GET();
  
        // httpCode will be negative on error
        if (httpCode > 0) {
          // HTTP header has been send and Server response header has been handled
          Serial.printf("[HTTPS] GET... code: %d\n", httpCode);
  
          // file found at server
          if (httpCode == HTTP_CODE_OK || httpCode == HTTP_CODE_MOVED_PERMANENTLY) {
            String payload = https.getString();
            Serial.println(payload);


    Xulydata(payload);

            
          }
        } else {
          Serial.printf("[HTTPS] GET... failed, error: %s\n", https.errorToString(httpCode).c_str());
        }
  
        https.end();
      }
        else {
        Serial.printf("[HTTPS] Unable to connect\n");
      }
      
  }
  delete client;
  }
  else {
    Serial.println("Unable to create client");
  }
      
  
}

///////////////////////////////////////////////////////